/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Wed, 23 Jul 2025 03:54:52 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function isBlobUrl(obj) {
        return (typeof obj === 'string' && obj.indexOf('blob:') === 0);
    }
        
    function isDataUrl(obj) {
        // NOTE: checking with dataUrlRe is slow
        return (typeof obj === 'string' && obj.indexOf('data:') === 0);
    }
        
    function encodeUnicodeStrToBase64(str) {
        return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
            function toSolidBytes(match, p1) {
                return String.fromCharCode('0x' + p1);
            }
        ));
    }
        
    function convertObjToJsonDataUrl(obj, mime='application/json') {
        if (typeof obj !== 'string') {
            obj = JSON.stringify(obj);
        }
        return 'data:' + mime + ';base64,' + encodeUnicodeStrToBase64(obj);
    }
        
    function convertObjToTextDataUrl(obj) {
        if (typeof obj !== 'string') {
            obj = JSON.stringify(obj);
        }
        return 'data:text/plain;base64,' + encodeUnicodeStrToBase64(obj);
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    const transformEulerV3dToBlenderShortest = function() {
        const eulerTmp = new v3d.Euler();
        const eulerTmp2 = new v3d.Euler();
        const vec3Tmp = new v3d.Vector3();
    
        return function(euler, dest) {
            const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
            const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();
    
            const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
            const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();
    
            dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
            return transformCoordsSpace(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
        }
    }();
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }
        
    function RotationInterface() {
        /**
         * @ignore
         * For user manipulations use XYZ extrinsic rotations (which
         * are the same as ZYX intrinsic rotations)
         *     - Blender/Max/Maya use extrinsic rotations in the UI
         *     - XYZ is the default option, but could be set from
         *       some order hint if exported
         */
        this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
        this._actualRotation = new v3d.Euler();
    }
    
    Object.assign(RotationInterface, {
        initObject: function(obj) {
            if (obj.userData.puzzles === undefined) {
                obj.userData.puzzles = {}
            }
            if (obj.userData.puzzles.rotationInterface === undefined) {
                obj.userData.puzzles.rotationInterface = new RotationInterface();
            }
    
            const rotUI = obj.userData.puzzles.rotationInterface;
            rotUI.updateFromObject(obj);
            return rotUI;
        },
    });
    
    Object.assign(RotationInterface.prototype, {
        updateFromObject: function(obj) {
            const SYNC_ROT_EPS = 1e-8;
    
            if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
                this._actualRotation.copy(obj.rotation);
                this._updateUserRotFromActualRot();
            }
        },
    
        getActualRotation: function(euler) {
            return euler.copy(this._actualRotation);
        },
    
        setUserRotation: function(euler) {
            // don't copy the order, since it's fixed to ZYX for now
            this._userRotation.set(euler.x, euler.y, euler.z);
            this._updateActualRotFromUserRot();
        },
    
        getUserRotation: function(euler) {
            return euler.copy(this._userRotation);
        },
    
        _updateUserRotFromActualRot: function() {
            const order = this._userRotation.order;
            this._userRotation.copy(this._actualRotation).reorder(order);
        },
    
        _updateActualRotFromUserRot: function() {
            const order = this._actualRotation.order;
            this._actualRotation.copy(this._userRotation).reorder(order);
        },
    });
        
    const Tween = (function() {
    
    var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
    if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
    return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
    this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
    this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
    t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
    for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
    if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
    return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
    InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
    return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
    return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(console.log(t),t.TWEEN=TWEEN)}(this);
    
    return TWEEN;
    })();
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    function getMaterialEditableColors(matName) {
        const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (!mat) {
            return [];
        }
    
        if (mat.isMeshNodeMaterial) {
            return Object.keys(mat.nodeRGBMap);
        } else if (mat.isMeshStandardMaterial) {
            return ['color', 'emissive'];
        } else {
            return [];
        }
    }
        
    const LIST_NONE = '<none>';

    return {
        bindListener, getElements, isBlobUrl, isDataUrl,
        convertObjToJsonDataUrl, convertObjToTextDataUrl, getObjectByName, retrieveObjectNames,
        transformCoordsSpace, transformEulerV3dToBlenderShortest, getSceneCoordSystem, RotationInterface,
        Tween, getSceneAnimFrameRate, getSceneByAction, getElement,
        getMaterialEditableColors, LIST_NONE,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    const styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (let i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        let cssRules;
        try {
            cssRules = styles[i].cssRules;
        }
        catch (e) { continue; }

        for (let j = 0; j < cssRules.length; j++) {
            const cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                const cssRulesMedia = cssRule.cssRules;
                for (let k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = true;

setCSSRuleStyle('backgroundImage', 'url(\'preloader.gif\')', '.v3d-simple-preloader-logo', false, '');

setCSSRuleStyle('background', 'black', '.v3d-simple-preloader-bar', false, '');

setCSSRuleStyle('outlineColor', 'black', '.v3d-simple-preloader-bar', false, '');

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["uploadImageAndUpdateMesh"] = uploadImageAndUpdateMesh;

var PROC = {
    "uploadImageAndUpdateMesh": uploadImageAndUpdateMesh,
};

var VARS = Object.defineProperties({}, {
    'loadedFile': { get: function() { return loadedFile; }, set: function(val) { loadedFile = val; } },
    'fileType': { get: function() { return fileType; }, set: function(val) { fileType = val; } },
    'value': { get: function() { return value; }, set: function(val) { value = val; } },
});

var loadedFile, value, fileType;

// openFile puzzle
function openFile(callback) {

    _pGlob.openedFile = '';
    _pGlob.openedFileMeta = {};

    var input = document.createElement('input');
    input.type = 'file';
    input.style = 'display: none';
    // NOTE: fixes iOS event issue
    document.body.appendChild(input);

    function inputChangeCb(event) {
        var file = event.target.files[0];

        var reader = new FileReader();

        PzLib.bindListener(reader, 'load', function() {
            _pGlob.openedFile = reader.result;
            _pGlob.openedFileMeta.name = file.name;
            _pGlob.openedFileMeta.size = file.size;
            _pGlob.openedFileMeta.type = file.type;
            callback();
            document.body.removeChild(input);
        }, false);

        reader.readAsDataURL(file);
    }
    PzLib.bindListener(input, 'change', inputChangeCb);

    if (appInstance.controls) {
        appInstance.controls.forceMouseUp();
    }

    input.click();
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// dropFileTo puzzle
function dropFileTo(ids, isParent, dropCb, dragOverCb) {

    var elems = PzLib.getElements(ids, isParent);

    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        function dropEventCb(event) {
            if (event.dataTransfer && event.dataTransfer.files.length) {
                var file = event.dataTransfer.files[0];

                var reader = new FileReader();

                PzLib.bindListener(reader, 'load', function() {
                    _pGlob.openedFile = reader.result;
                    _pGlob.openedFileMeta.name = file.name;
                    _pGlob.openedFileMeta.size = file.size;
                    _pGlob.openedFileMeta.type = file.type;
                    dropCb(event);
                }, false);

                reader.readAsDataURL(file);
            }

            event.preventDefault();
        }
        PzLib.bindListener(elem, 'drop', dropEventCb);

        function dragOverEventCb(event) {
            dragOverCb(event);
            event.preventDefault();
        }
        PzLib.bindListener(elem, 'dragover', dragOverEventCb);
    }

}

// downloadFile puzzle
function downloadFile(contents, filename) {
    if (!filename)
        return;

    if (contents instanceof Promise) {

        contents.then(function(response) {

            doDownload(response, filename);

        }, function(error) {});

    } else {

        doDownload(contents, filename);

    }

    function doDownload(contents, filename) {
        if (typeof contents !== 'string') {
            contents = PzLib.convertObjToJsonDataUrl(contents);
        } else if (!PzLib.isDataUrl(contents) && !PzLib.isBlobUrl(contents)) {
            contents = PzLib.convertObjToTextDataUrl(contents);
        }

        const link = document.createElement('a');
        link.href = contents;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        setTimeout(() => {
            document.body.removeChild(link);
        }, 100);
    }
}

// openedFile puzzle
function openedFile(what) {
    switch (what) {
    case 'DATA':
        return _pGlob.openedFile;
        break;
    case 'NAME':
        return _pGlob.openedFileMeta.name || '';
        break;
    case 'EXTENSION':
        return (_pGlob.openedFileMeta.name || '').split('.').pop().toLowerCase();
        break;
    case 'SIZE':
        return _pGlob.openedFileMeta.size || 0;
        break;
    case 'TYPE':
        return _pGlob.openedFileMeta.type || '';
        break;
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = PzLib.retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = PzLib.getSceneCoordSystem();

    PzLib.transformCoordsSpace(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    PzLib.transformCoordsSpace(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = PzLib.getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = PzLib.transformEulerV3dToBlenderShortest(obj.rotation,
                    _pGlob.eulerTmp);
            PzLib.transformCoordsSpace(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = PzLib.RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}

// animateParam puzzle
function tweenUpdateCb() {
    PzLib.Tween.update();
}
appInstance.renderCallbacks.push(tweenUpdateCb);
if (PL.editorRenderCallbacks)
    PL.editorRenderCallbacks.push([appInstance, tweenUpdateCb]);

// animateParam puzzle
_pGlob.animateParamUpdate = 0;
_pGlob.animateParamTweenInstance = {};

function animateParam(from, to, duration, easing, easing2, repeat, yoyo, blockId, on_update, when_finished) {

    var mode = easing == "Linear" ?
        PzLib.Tween.Easing.Linear.None : PzLib.Tween.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    const tween = new PzLib.Tween.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();

    _pGlob.animateParamTweenInstance[blockId] = tween;
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// Describe this function...
function uploadImageAndUpdateMesh() {
  loadedFile = openedFile('DATA');
  fileType = openedFile('TYPE');

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('if (VARS.fileType == \'image/svg+xml\') {' + '\n' +
  '    window.displaySVG(app, VARS.loadedFile);' + '\n' +
  '} else if (VARS.fileType == \'image/png\' || VARS.fileType == \'image/jpeg\') {' + '\n' +
  '    const img = new Image();' + '\n' +
  '    img.src = VARS.loadedFile;' + '\n' +
  '' + '\n' +
  '    img.onload = function() {' + '\n' +
  '        // Create a canvas' + '\n' +
  '        const canvas = document.createElement(\'canvas\');' + '\n' +
  '        const ctx = canvas.getContext(\'2d\');' + '\n' +
  '' + '\n' +
  '        // Set canvas size to match the image' + '\n' +
  '        canvas.width = img.width;' + '\n' +
  '        canvas.height = img.height;' + '\n' +
  '' + '\n' +
  '        // Fill background with solid color (white or any desired color)' + '\n' +
  '        ctx.fillStyle = \'#ffffff\'; // White background' + '\n' +
  '        ctx.fillRect(0, 0, canvas.width, canvas.height);' + '\n' +
  '' + '\n' +
  '        // Draw the PNG image on top' + '\n' +
  '        ctx.drawImage(img, 0, 0);' + '\n' +
  '' + '\n' +
  '        // Convert the canvas back to a data URL' + '\n' +
  '        const processedImage = canvas.toDataURL(\'image/png\');' + '\n' +
  '' + '\n' +
  '        // Pass the modified image to Potrace' + '\n' +
  '        Potrace.loadImageFromUrl(processedImage);' + '\n' +
  '        Potrace.process(function() {' + '\n' +
  '            const file = new Blob([Potrace.getSVG(1)], {type: \'image/svg+xml\'});' + '\n' +
  '            if (file) {' + '\n' +
  '                const reader = new FileReader();' + '\n' +
  '                reader.onload = function() {' + '\n' +
  '                    window.displaySVG(app, reader.result);' + '\n' +
  '                };' + '\n' +
  '                reader.readAsDataURL(file);' + '\n' +
  '            }' + '\n' +
  '        });' + '\n' +
  '    };' + '\n' +
  '}')))(appInstance, v3d, PL, VARS, PROC);

  /* New svg animation */
  changeVis('Merged Mesh', false);
  registerSetTimeout(0.5, function() {
    changeVis('Merged Mesh', true);
    setObjTransform('Merged Mesh', false, 'scale', [0, 0, 0], false);

    animateParam(0, 0.1, 1.5, 'Exponential', 'Out', 0, false, 'z`FE}La+|WyPFY*.o=jA',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        setObjTransform('Merged Mesh', false, 'rotation', [0, '', ''], false);

    animateParam(0, 540, 1.5, 'Exponential', 'Out', 0, false, '_Rs.cnDupwv*asI2p0D?',
        function() {
      setObjTransform('Merged Mesh', false, 'rotation', [_pGlob.animateParamUpdate || 0, '', ''], false);
    },
        function() {});

        });
}

function setScreenScale(factor) {

    // already have maximum pixel ratio in HiDPI mode
    if (!appInstance.useHiDPIRenderPass)
        appInstance.renderer.setPixelRatio(factor);

    if (appInstance.postprocessing)
        appInstance.postprocessing.composer.setPixelRatio(factor);

    // to update possible post-processing passes
    appInstance.onResize();
}

// setActiveCamera puzzle
function setActiveCamera(camName) {
    var camera = PzLib.getObjectByName(camName);
    if (!camera || !camera.isCamera || appInstance.getCamera() == camera)
        return;
    appInstance.setCamera(camera);
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// getEntityByName puzzle
function getEntityByName(name, getWhat) {
    switch (getWhat) {
        case 'OBJECT':
        case 'ANIMATION':
        case 'MATERIAL':
            return name;
        case 'GROUP':
            return ['GROUP', name];
    }
}

// assignMaterial puzzle
function assignMat(objSelector, matName) {
    const objNames = PzLib.retrieveObjectNames(objSelector);
    if (!matName)
        return;

    const isMaterialInScene = (mat) => v3d.SceneUtils.getMaterialsByName(appInstance, mat.name).some(iMat => iMat === mat);
    const materialsCache = _pGlob.materialsCache;
    const mat = materialsCache.get(matName) || v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        const obj = PzLib.getObjectByName(objName);
        if (obj) {
            const firstSubmesh = obj.resolveMultiMaterial()[0];
            const oldMat = firstSubmesh.material;
            firstSubmesh.material = mat;

            if (!isMaterialInScene(oldMat)) {
                materialsCache.set(oldMat.name, oldMat);
            }
        }
    }

    if (materialsCache.has(mat.name) && isMaterialInScene(mat)) {
        materialsCache.delete(mat.name);
    }
}

// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = PzLib.getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = PzLib.getMaterialEditableColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = PzLib.getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== PzLib.LIST_NONE) {
        var targetObj = PzLib.getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.copy(targetObj.matrixWorld).invert();
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}


eventHTMLElem('click', ['QUERYSELECTOR', '#filepond--drop-label'], true, function(event) {
  openFile(function() {
    uploadImageAndUpdateMesh();
  });
});

dropFileTo(['QUERYSELECTOR', '.dragdropsection'], true, function() {
  uploadImageAndUpdateMesh();
}, function() {});

dropFileTo(['CONTAINER'], false, function() {
  uploadImageAndUpdateMesh();
}, function() {});

eventHTMLElem('click', 'exportImage', true, function(event) {
  downloadFile(appInstance.renderer.domElement.toDataURL('image/png'), '3DLogoLab.png');
});

eventHTMLElem('click', 'highQuality', true, function(event) {
  setScreenScale(1.5);
});

eventHTMLElem('click', 'defaultQuality', true, function(event) {
  setScreenScale(1);
});

/* App open animation */
setObjTransform('Merged Mesh', false, 'position', ['', '', 5], false);

animateParam(5, 0, 3, 'Exponential', 'Out', 0, false, 'qX]Hl}u/}DOFy)A+nh-L',
    function() {
  setObjTransform('Merged Mesh', false, 'position', ['', '', _pGlob.animateParamUpdate || 0], false);
},
    function() {});

    setObjTransform('Merged Mesh', false, 'position', ['', -100, ''], false);

animateParam(-100, 0, 3, 'Exponential', 'Out', 0, false, '0PMroN|(Cw8J]P@]6luu',
    function() {
  setObjTransform('Merged Mesh', false, 'position', ['', _pGlob.animateParamUpdate || 0, ''], false);
},
    function() {});

    setObjTransform('Merged Mesh', false, 'position', [20, '', ''], false);

animateParam(20, 0, 3, 'Exponential', 'Out', 0, false, '0$)oE%(yi(i0zIV%4E33',
    function() {
  setObjTransform('Merged Mesh', false, 'position', [_pGlob.animateParamUpdate || 0, '', ''], false);
},
    function() {});

    setObjTransform('Merged Mesh', false, 'rotation', [0, '', ''], false);

animateParam(0, 540, 3, 'Exponential', 'Out', 0, false, 'xcu5niZk(17c~*D]+p{y',
    function() {
  setObjTransform('Merged Mesh', false, 'rotation', [_pGlob.animateParamUpdate || 0, '', ''], false);
},
    function() {});


setActiveCamera('camrotate');

/* Play and pause rotation animation */


operateAnimation('PAUSE', 'camrotateaxis', null, null, 'AUTO', 1,
        function() {}, false);


assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'Chrome_rough_optimised');

eventHTMLElem('click', 'chrome', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'vUO9-px[~sd8W]YS-NHW',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'Chrome_rough_optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'm9G#zy*kDS0ZO.e-?3Aw',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient1', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'z=#js;o7vRAv6n|T$Reg',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient1');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'MqYz+~SB{8VVG$lB3nA)',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'chromerough', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, '8k{/dRlv3L#gL)|{Y|?q',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'Chrome_Clean_Optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'z`FE}La+|WyPFY*.o=jA',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient2', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'o27#;1P]?Gm_1VmGtXLQ',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient2');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, ')J;?N/8}~Q5-55`6F{::',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'chromelines', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'tyf]:(-b@PsDs]-wXIrM',
      function() {
    assignMat('Merged Mesh', 'Corrugated_Steel_Optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '$q1KetDolQVdFv)?0q%V',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient3', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'Eio435]Spx(g_dy]E7L^',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient3');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '61K,S?I|!fb3LsIQD/$?',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'chromedamage', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'Z-[ZISMZ[_H^7{_A|;)E',
      function() {
    assignMat('Merged Mesh', 'Damaged_Metal_optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '%+1*W*R6o;FR-4oG7dJv',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient4', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'qBcfCsSt_S_CD~uYZs]9',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient4');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '|9Nq2HtzXF?n_=J7P`(@',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'chromesquares', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, '*$$]{zt[[b~N*Oz(rtE=',
      function() {
    assignMat('Merged Mesh', 'MetalPlates_optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'tuy#gl;{s-Y,G1m4}gWb',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient5', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, ')IK#Vf67Y!!yejM2=0G.',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient5');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'zOcVa@|a.*YZdc:p8xsy',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'golddamage', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'plnSff_eTeTf8vQf)q@R',
      function() {
    assignMat('Merged Mesh', 'Damaged_Gold_Optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '(@s0hZo-z89.IC/bbY|D',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gradient6', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'go#zn%WG0}.[z1SiyQ]L',
      function() {
    assignMat(getEntityByName('Merged Mesh', 'OBJECT'), 'gradient6');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, ')bm[rL(JgDW(De$,vQ$v',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'gold', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, '{W_/_8j73!RH}BzzVd(q',
      function() {
    assignMat('Merged Mesh', 'Gold_Clean_Optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '?`MSapVNK%xlQ701gTW]',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'goldrough', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, '=}Q}9]L*F#Ms+T*qnu8z',
      function() {
    assignMat('Merged Mesh', 'Gold_Rough_Optimised');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, '+oK!Wc6RlG2,phR|K5F3',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

eventHTMLElem('click', 'materialNine', true, function(event) {
  /* Animate HDRI for shine effect */
  /* Animate Logo pulse effect & Assign material */

  animateParam(0.1, 0.09, 0.2, 'Quartic', 'Out', 0, false, 'xrHoTx,#s~@tz1]6/P;$',
      function() {
    assignMat('Merged Mesh', 'Material.001');
    setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
  },
      function() {

    animateParam(0.09, 0.1, 0.8, 'Cubic', 'InOut', 0, false, 'pLH.I@?6_cSJt_nuO{q1',
        function() {
      setObjTransform('Merged Mesh', false, 'scale', [_pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0, _pGlob.animateParamUpdate || 0], false);
    },
        function() {});

        });

      });

bloom(0.8, 0.2, 0.5);

setScreenScale(1.5);

eventHTMLElem('input', 'color-changer', true, function(event) {
  value = getHTMLElemAttribute('value', 'color-changer', true);
  setMaterialColor('env_sphere', 'RGB', 0, 0, 0, value);
});


operateAnimation('PAUSE', 'Animationparent', null, null, 'AUTO', 1,
        function() {}, false);


makeParent('Merged Mesh', 'Animationparent');



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
